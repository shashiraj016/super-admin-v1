import { DoCheck, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { ActivateEvent, RowOrGroup, TreeStatus } from '../../types/public.types';
import { TableColumn } from '../../types/table-column.type';
import { ColumnGroupWidth, PinnedColumns } from '../../types/internal.types';
import * as i0 from "@angular/core";
export declare class DataTableBodyRowComponent<TRow = any> implements DoCheck, OnChanges {
    private cd;
    set columns(val: TableColumn[]);
    get columns(): TableColumn[];
    set innerWidth(val: number);
    get innerWidth(): number;
    expanded: boolean;
    rowClass?: (row: RowOrGroup<TRow>) => string | Record<string, boolean>;
    row: TRow;
    group: TRow[];
    isSelected: boolean;
    rowIndex: number;
    displayCheck: (row: TRow, column: TableColumn, value?: any) => boolean;
    treeStatus?: TreeStatus;
    ghostLoadingIndicator: boolean;
    verticalScrollVisible: boolean;
    disable$: BehaviorSubject<boolean>;
    set offsetX(val: number);
    get offsetX(): number;
    get cssClass(): string;
    rowHeight: number;
    get columnsTotalWidths(): number;
    activate: EventEmitter<ActivateEvent<TRow>>;
    treeAction: EventEmitter<any>;
    _element: HTMLElement;
    _columnGroupWidths: ColumnGroupWidth;
    _columnsByPin: PinnedColumns[];
    _offsetX: number;
    _columns: TableColumn[];
    _innerWidth: number;
    private _rowDiffer;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    onActivate(event: ActivateEvent<TRow>, index: number): void;
    onKeyDown(event: KeyboardEvent): void;
    onMouseenter(event: MouseEvent): void;
    recalculateColumns(val?: TableColumn<TRow>[]): void;
    onTreeAction(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataTableBodyRowComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataTableBodyRowComponent<any>, "datatable-body-row", never, { "columns": { "alias": "columns"; "required": false; }; "innerWidth": { "alias": "innerWidth"; "required": false; }; "expanded": { "alias": "expanded"; "required": false; }; "rowClass": { "alias": "rowClass"; "required": false; }; "row": { "alias": "row"; "required": false; }; "group": { "alias": "group"; "required": false; }; "isSelected": { "alias": "isSelected"; "required": false; }; "rowIndex": { "alias": "rowIndex"; "required": false; }; "displayCheck": { "alias": "displayCheck"; "required": false; }; "treeStatus": { "alias": "treeStatus"; "required": false; }; "ghostLoadingIndicator": { "alias": "ghostLoadingIndicator"; "required": false; }; "verticalScrollVisible": { "alias": "verticalScrollVisible"; "required": false; }; "disable$": { "alias": "disable$"; "required": false; }; "offsetX": { "alias": "offsetX"; "required": false; }; "rowHeight": { "alias": "rowHeight"; "required": false; }; }, { "activate": "activate"; "treeAction": "treeAction"; }, never, never, true, never>;
}
